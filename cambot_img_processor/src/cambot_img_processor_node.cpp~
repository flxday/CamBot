#define CAMBOT_IMG_PROCESSOR_H

#include "cambot_img_processor_node.h"

using namespace Eigen;

CambotImgProcessor::CambotImgProcessor() : 
    nh(ros::this_node::getName()),
    img_tp(nh)
{
    //loop rate [hz], Could be set from a yaml file 
    rate=10; 
    
    //sets publishers
    image_pub = img_tp.advertise("image_out", 100);
    
    //sets subscribers
    image_subs = img_tp.subscribe("/usb_cam/image_raw", 1, &CambotImgProcessor::imageCallback, this);
    camera_info_subs = nh.subscribe("/usb_cam/camera_info", 100, &CambotImgProcessor::cameraInfoCallback, this);
	detector_subs = nh.subscribe("/cambot_face_detector/detector_out", 1, &CambotImgProcessor::detectorCallback, this);
	faceSize_subs = nh.subscribe("/cambot_face_detector/face_size", 1, &CambotImgProcessor::faceSizeCallback, this);
	kalmanFilter_subs = nh.subscribe("/cambot_kalman_filter/kalman_out", 1, &CambotImgProcessor::kalmanFilterCallback, this);
}

CambotImgProcessor::~CambotImgProcessor()
{
    //Destructor
}

void CambotImgProcessor::process()
{

    //check if new image is there
    if ( cv_img_ptr_in != nullptr ) {
        //copy the input image to the out one
        cv_img_out.image = cv_img_ptr_in->image;

		if(box_detector.x > 0) {
    		//cv::rectangle(cv_img_out.image, box_detector, cv::Scalar(0, 255,0), 1);
			cv::circle(cv_img_out.image, box_detector, cv::Scalar(255, 0,0), 1);
		}

		if(box_kalman.x > 0) {
    		cv::rectangle(cv_img_out.image, box_kalman, cv::Scalar(0, 255,0), 3);
		}
   	}

    //reset input image
    cv_img_ptr_in = nullptr;
}

void CambotImgProcessor::publish()
{
    //image_raw topic
    cv_img_out.header.seq ++;
    cv_img_out.header.stamp = ros::Time::now();
    cv_img_out.header.frame_id = "camera"; 
    cv_img_out.encoding = img_encoding;
    image_pub.publish(cv_img_out.toImageMsg());
}

double CambotImgProcessor::getRate() const
{
    return rate;
}


/*****CALLBACKS*****/

void CambotImgProcessor::imageCallback(const sensor_msgs::ImageConstPtr& image_msg)
{
    try
    {
        img_encoding = image_msg->encoding;	//get image encodings
        cv_img_ptr_in = cv_bridge::toCvCopy(image_msg, image_msg->encoding);	//get image
    }
    catch (cv_bridge::Exception& e)
    {
        ROS_ERROR("CambotImgProcessor::image_callback(): cv_bridge exception: %s", e.what());
        return;
    }      
}

void CambotImgProcessor::cameraInfoCallback(const sensor_msgs::CameraInfo & msg)
{
    //
}

void CambotImgProcessor::detectorCallback(const geometry_msgs::Point& detect_msg)
{
	try {
		detect_center_X = detect_msg.x;
		detect_center_Y = detect_msg.y;
		lastCallback = ros::Time::now().toSec();
	} catch (ros::Exception& e) {
		ROS_ERROR("CambotImgProcessor::detectorCallback(): exception: %s", e.what());
        return;
    }

}

void CambotImgProcessor::kalmanFilterCallback(const geometry_msgs::Point& kalman_msg)
{
	try {
		kalman_center_X = kalman_msg.x;
		kalman_center_Y = kalman_msg.y;
		lastCallback = ros::Time::now().toSec();
	} catch (ros::Exception& e) {
		ROS_ERROR("CambotImgProcessor::kalmanFilterCallback(): exception: %s", e.what());
        return;
    }
}

void CambotImgProcessor::faceSizeCallback(const geometry_msgs::Point& size_msg)
{
	try {
		box_detector.width = size_msg.x;
		box_detector.height = size_msg.y;

		box_kalman.width = size_msg.x;
		box_kalman.height = size_msg.y;

		box_detector.x = detect_center_X - box_detector.width * 0.5;
		box_detector.y = detect_center_Y - box_detector.height * 0.5;

		box_kalman.x = kalman_center_X - box_detector.width * 0.5;
		box_kalman.y = kalman_center_Y - box_detector.height * 0.5;
		
		lastCallback = ros::Time::now().toSec();
	} catch (ros::Exception& e) {
		ROS_ERROR("CambotImgProcessor::detectorCallback(): exception: %s", e.what());
        return;
    }

}

/*
  cambot_kalman_filter_node.h - Kalman filter's tracker library.
  Created by Marc Genevat, February 14, 2016.
  Master's UVic Project: CamBot
  Team members: Fèlix Torres, Toni Badenas, Toni Guasch, Xavier Blasco and Marc Genevat
*/

#define CAMBOT_KALMAN_FILTER_NODE_C_

/************LIBRARIES************/

#include "cambot_kalman_filter_node.h"

using namespace Eigen;
using namespace std;

/**********************************/

/*********LOCAL VARIABLES*********/

//SET KALMAN PARAMETERS

//State
//Vector4d X;
//Matrix4d P;
Vector2d X;
Matrix2d P;

//Measurement
Vector2d y;

//Prediction variables
//Vector4d x_prediction;
//Matrix4d p_prediction;
//Matrix4d F_x;
//Matrix4d F_n;
Vector2d x_prediction;
Matrix2d p_prediction;
Matrix2d F_x;
Matrix2d F_n;

//Correction variables
Vector2d e;
Vector2d z;
//MatrixXd K(2,4);
//MatrixXd H(2,4);
Matrix2d K(2,2);
MatrixXd H(2,2);
Matrix2d E;
Matrix2d R;
//Matrix4d Q;
Matrix2d Q;
Matrix2d Z;

//double dist_M;

/**********************************/

/*********LOCAL FUNCTIONS*********/

CambotKalmanFilter::CambotKalmanFilter():
	node(ros::this_node::getName())
{
	//Loop rate [hz]
	rate = 10;

	//Set publishers
	kalman_tracker = node.advertise<geometry_msgs::Point>("kalman_out", 1);
	//dm = node.advertise<std_msgs::Float32>("dm_out", 1);
	

	//Set subscribers
	face_detected = node.subscribe("/cambot_face_detector/detector_out", 1, &CambotKalmanFilter::faceDetectorCallback, this);

	//Initial state position (estimated)
	X(0) = 320;
	X(1) = 240;
	//X(2) = 0;
	//X(3) = 0;

	//Initial covariance state (estimated)
	/*P << 50, 0, 0, 0,
	     0, 50, 0, 0,
	      0, 0, 12.5, 0,
	      0, 0, 0, 12.5;*/
	P << 50, 0, 
	     0, 50;

	//Prediction variables
	/*F_x << 1, 0, 0, 0,
	       0, 1, 0, 0,
	       0, 0, 1, 0,
	       0, 0, 0, 1;*/
	F_x << 1, 0, 
	       0, 1;

	/*F_n << 1, 0, 0, 0,
	       0, 1, 0, 0,
	       0, 0, 1, 0,
	       0, 0, 0, 1;*/
	F_n << 1, 0, 
	       0, 1;

	//Covariance of the perturbation
	/*Q << 1, 0, 0, 0,
	     0, 1, 0, 0,
	     0, 0, 1, 0,
	     0, 0, 0, 1;*/
	Q << 1, 0, 
	     0, 1;

	//Estimated variables


	//Covariance of the measurement
	/*H << 1, 0, 0, 0,
	     0, 1, 0, 0;*/
	H << 1, 0, 
	     0, 1;
	
	// covariance of the measurment perturbation
	R << 1, 0,
	     0, 1;

}

CambotKalmanFilter::~CambotKalmanFilter() {
	//Destructor
}

void CambotKalmanFilter::prediction() {
	
	//State prediction 
	//x+ <- Fx · x + Fu · u
	x_prediction = F_x * X;

	//Covariance prediction
	//P <- Fx · P · Fx_T + Fn · Q + Fn_T 
	p_prediction = F_x * P * F_x.transpose() + F_n * Q + F_n.transpose();

}

void CambotKalmanFilter::correction() {
	
	//Expedition
	//e = H · x
	//E = H · P · H_T
	e = H * x_prediction;
	E = H * p_prediction * H.transpose();

	//Innovation
	z = y - e;
	Z = E + R;

	distanceMahalanobis();

	//if (dist_M < 50) {

		//Optimum gain
		//K = P · H_T · Z^-1
		K = p_prediction * H.transpose() * Z.inverse();

	
		//Prediction update
		//x+ <- x + K · z
		X = x_prediction + K * z;

		//P <- P - K · Z · K_T
		P = p_prediction - K * Z * K.transpose();
	//}
}

/*double CambotKalmanFilter::distanceMahalanobis() {	
	dist_M = z.transpose() * (Z + H * P * H.transpose()) * z;

	return dist_M;
}*/

void CambotKalmanFilter::publish() {
	tracker_msg.x = (uint)X[0];
	tracker_msg.y = (uint)X[1];

	//dm_msg.data = dist_M;
	
	kalman_tracker.publish(tracker_msg);
	//dm.publish(dm_msg);
}




double CambotKalmanFilter::getRate()
{
    return rate;
}
	

void CambotKalmanFilter::faceDetectorCallback(const geometry_msgs::Point& detect_msg) {
	try {
		y[0] = detect_msg.x;
		y[1] = detect_msg.y;
		lastCallback = ros::Time::now().toSec();
	} catch (ros::Exception& e) {
		ROS_ERROR("CambotKalmanFilter::faceDetectorCallback(): exception: %s", e.what());
        return;
    }
}
